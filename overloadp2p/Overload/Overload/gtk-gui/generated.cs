// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Stetic {
    
    
    internal class Gui {
        
        public static void Build(object obj, System.Type type) {
            Stetic.Gui.Build(obj, type.FullName);
        }
        
        public static void Build(object obj, string id) {
            System.Collections.Hashtable bindings = new System.Collections.Hashtable();
            if ((id == "MainWindow")) {
                Gtk.Window cobj = ((Gtk.Window)(obj));
                // Widget MainWindow
                cobj.Title = "Overload";
                Gtk.UIManager w1 = new Gtk.UIManager();
                Gtk.ActionGroup w2 = new Gtk.ActionGroup("Default");
                Gtk.Action w3 = new Gtk.Action("btnLog", "_Log", null, "gtk-properties");
                w3.ShortLabel = "_Log";
                bindings["btnLog"] = w3;
                w2.Add(w3, null);
                Gtk.Action w4 = new Gtk.Action("btnNetwork", null, null, "gtk-network");
                bindings["btnNetwork"] = w4;
                w2.Add(w4, null);
                w1.InsertActionGroup(w2, 0);
                cobj.AddAccelGroup(w1.AccelGroup);
                cobj.WindowPosition = ((Gtk.WindowPosition)(4));
                cobj.Events = ((Gdk.EventMask)(0));
                cobj.Name = "MainWindow";
                // Container child MainWindow.Gtk.Container+ContainerChild
                Gtk.VBox w5 = new Gtk.VBox();
                w5.Events = ((Gdk.EventMask)(0));
                w5.Name = "vbox1";
                // Container child vbox1.Gtk.Box+BoxChild
                w1.AddUiFromString("<ui><toolbar name='toolbar'><toolitem action='btnLog'/><toolitem action='btnNetwork'/></toolbar></ui>");
                Gtk.Toolbar w6 = ((Gtk.Toolbar)(w1.GetWidget("/toolbar")));
                w6.ShowArrow = false;
                w6.Tooltips = true;
                w6.ToolbarStyle = ((Gtk.ToolbarStyle)(0));
                w6.IconSize = ((Gtk.IconSize)(3));
                w6.Events = ((Gdk.EventMask)(0));
                w6.Name = "toolbar";
                bindings["toolbar"] = w6;
                w5.Add(w6);
                Gtk.Box.BoxChild w7 = ((Gtk.Box.BoxChild)(w5[w6]));
                w7.Position = 0;
                w7.Expand = false;
                w7.Fill = false;
                // Container child vbox1.Gtk.Box+BoxChild
                Gtk.TextView w8 = new Gtk.TextView();
                w8.CanFocus = true;
                w8.Events = ((Gdk.EventMask)(0));
                w8.Name = "txtLog";
                bindings["txtLog"] = w8;
                w5.Add(w8);
                Gtk.Box.BoxChild w9 = ((Gtk.Box.BoxChild)(w5[w8]));
                w9.Position = 1;
                // Container child vbox1.Gtk.Box+BoxChild
                Gtk.Statusbar w10 = new Gtk.Statusbar();
                w10.Events = ((Gdk.EventMask)(0));
                w10.Name = "statusbar";
                bindings["statusbar"] = w10;
                w5.Add(w10);
                Gtk.Box.BoxChild w11 = ((Gtk.Box.BoxChild)(w5[w10]));
                w11.Position = 2;
                w11.Expand = false;
                w11.Fill = false;
                bindings["vbox1"] = w5;
                cobj.Add(w5);
                cobj.DefaultWidth = 400;
                cobj.DefaultHeight = 300;
                bindings["MainWindow"] = cobj;
                w6.Show();
                w8.Show();
                w10.Show();
                w5.Show();
                cobj.Show();
                cobj.DeleteEvent += ((Gtk.DeleteEventHandler)(System.Delegate.CreateDelegate(typeof(Gtk.DeleteEventHandler), cobj, "OnDeleteEvent")));
                w3.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnBtnLogActivated")));
                w4.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnBtnNetworkActivated")));
            }
            System.Reflection.FieldInfo[] fields = obj.GetType().GetFields(((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) | System.Reflection.BindingFlags.Instance));
            for (int n = 0; (n < fields.Length); n = (n + 1)) {
                System.Reflection.FieldInfo field = fields[n];
                object widget = bindings[field.Name];
                if (((widget != null) && field.FieldType.IsInstanceOfType(widget))) {
                    field.SetValue(obj, widget);
                }
            }
        }
    }
    
    internal class ActionGroups {
        
        public static Gtk.ActionGroup GetActionGroup(System.Type type) {
            return Stetic.ActionGroups.GetActionGroup(type.FullName);
        }
        
        public static Gtk.ActionGroup GetActionGroup(string name) {
            return null;
        }
    }
}
